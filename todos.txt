- {DONE} set up github
- {DONE} setting up the frontend using create-react-app
- {DONE} deploy the frontend in vercel
- {DONE} set up Home page component
- {DONE} create SitewideBanner component
- {DONE} create Header component
    - {DONE} create HamburgerMenu sub-component
    - {DONE} make HamburgerMenu as component not as sub-component 
    - {DONE} create Flag component
    - {DONE} create WebsiteLogo component
    - {DONE} create Card component
    - {DONE} create CustomerAccount component
    - {DONE} create SearchBar component
    - {DONE} create Navbar, Submenu and SubSubmenu component utils and create scraping script for navbar data
        - {DONE} fix show by brand data in the navbar
        - {DONE} set up redux
        - {DONE} make HamburgerMenu open the side navbar and create menu-mask effect
        - {DONE} create MenuMask component and when click on it close the side navbar 
        - {DONE} create getIconById function  and use it in the navbar
            - {DONE} scrap icon ids
        - {DONE} fix navigating to page instead of open submenu 
    - {DONE} create CustomerSupport component and done creating  Header component
- {DONE} create FrontHero component
- {DONE} create InPageNav component and scraping InPageNav data
- {DONE} make SitewideBanner component dynamic and change it's name to Banner
- {DONE} create Articles and Article components and scrap ArticlesData
        - {DONE} fix scraping reads number with K and M      
        - {DONE} scrap article type
- {DONE} create EmailSignUp component   
- {DONE} create Footer component   
- {DONE} scrap Footer data and make footer component dynamic and create FooterItem component  
- {DONE} set up Store page component
- {DONE} create NavbarInfo component
- {DONE} scrap storeTopBanner data 
- {DONE} create Slider component
        note: reference to your github: https://github.com/nur1208/muscleandstrength-clone-v1/blob/main/frontend/src/components/SliderV2.jsx
- {DONE} create QuickNavBar component
- {DONE} scrap QuickNavBar data and make QuickNavBar component dynamic
- {DONE} create StoreSectionSwiper component
- {DONE} create Product component
- {DONE} create Products component
- {DONE} scrap topDealProducts data and make Products, Product and StoreSectionSwiper components dynamic
- {DONE} improve StoreSectionSwiper component
- {DONE} improve StoreSectionSwiper component again
- {DONE} scrap topRatedProducts data
- {DONE} scrap tradingProducts data
- {DONE} scrap MERCH_BANNER_2 data
- {DONE} create Brands component
- {DONE} add pageHtml.html file to .gitignore
- {DONE} scrap Brands data
- {DONE} scrap MERCH_BANNER_3 data
- {DONE} create MoreOn component
- {DONE} scrap MoreOn data and make MoreOn component dynamic
- {DONE} create PerksFooter component
- {DONE} scrap PerksFooter data, make PerksFooter component dynamic and finish create Store page
- {DONE} test if removing MoreOn component fix Store page responsive problem
- {DONE}  fix Store page responsive problem
- {DONE} fix navbar component problem
- {DONE} improve EmailSignUp component's isSticky state
- {DONE} create Login page component
- {DONE} create Field component and scrap login fields
- {DONE} add required sign to field component
- {DONE} make field component render input element or select element
- {DONE} scrap sign up fields 
- {DONE} create RightSignUpInfo component       
- {DONE} scrap SignUpBenefits data
- {DONE} make Form component more dynamic
- {DONE} create SignUp page component
- {DONE} create GetNotified component
- {DONE} set up Product page component
- {DONE} create ProductHeader component
- {DONE}  fix Product page responsive problem for tablets screen
- {DONE}  fix Product page responsive problem for tablets screen part 2
- {DONE} scrap ProductHeader data
- {DONE} make ProductHeader component more dynamic
- {DONE} create FeaturesList component
- {DONE} scrap FeaturesList data
- {DONE} make FeaturesList component more dynamic
- {DONE} create FeatherLight Modal component
- {DONE} scrap btnTitle for FeaturesList data
- {DONE} fix FeaturesList component responsive problem
- {DONE} create Deals component
- {DONE} scrap Deals component data
- {DONE} make Deals component more dynamic
- {DONE} create Select component and useSelect hook
- {DONE} create BuyingOptions component
- {DONE} close the options after a user selected a option
- {DONE} make 'Reward Points Earned' button open FEATHER_LIGHT modal
- {DONE} create SecureTransaction modal
- {DONE} scrap BuyingOptions data
- {DONE} make BuyingOptions component more dynamic
- {DONE} create BuyingOption component and make it dynamic and fix scrap productData scripts
- {DONE} create Nutrition component
- {DONE} scrap Nutrition data 
- {DONE} scrap Nutrition data part 2
- {DONE} make Nutrition component more dynamic and scrap servingSize and servingsPerContainer params and update Selector and useSelect
- {DONE} test Nutrition component and scraping script
        - {DONE} fix getSelectedValue not function error 
- {DONE} create ProductInfo component
- {DONE} scrap productInfo data
- {DONE} make ProductInfo component more dynamic
- {DONE} create YoutubeVideo component
- {DONE} scrap productInfo data part 2
- {DONE} make ProductInfo component more dynamic part 2
- {DONE} create show-all functionality for Nutrition component when it is small screen
- {DONE} create ReviewsOverall component
- {DONE} scrap ReviewsOverall data 
- {DONE} make ReviewsOverall component more dynamic
- {DONE} create Reviews component
- {DONE} create Review component
- {DONE} scrap Reviews data 
- {DONE} fix responsive problems for Reviews and Review components
- {DONE} make Reviews and Review components more dynamic
        - {DONE} fix reviews parameter in product data
        - {DONE} fix reviews[num].content parameter in product data
        - {DONE} add more then one badge 
- {DONE} scrap ratingItems fro product data and use it in Review component
- {DONE} finish setting up product page
- {DONE} set up the backend
- {DONE} deploy the backend in vercel
- {DONE} create database design for product resource
- {DONE} create Product database model and Product post api route
- {DONE} set up global Error Handler for the backend
- {DONE} add productDetail parameter to Product model 
- {DONE} create getProduct and getProducts routes for Product resource
- {DONE} fix Cast to ObjectId failed error message  for production
        GET clear message for pro
- {DONE} add product Data to mongodb after scraping
- {DONE} create Review database model and createReview api route
- {DONE} createReviews api route
- {DONE} add review Data to mongodb after scraping
- {DONE} scrap all THIS WEEK'S TOP DEALS products detail data and save them in database
- {DONE} update Product model parameters
- {DONE} update product scraping script and re-scrap all TOP DEALS products detail
- {DONE} use top deals products that in database in the frontend
- {DONE} make Product page more dynamic
- {DONE} add productInfo.text, productInfo.videId, productInfo.mainStyle and productInfo.style to Product model and re-scrap
- {DONE} improve scrapProductInfo scraping script and ProductInfo component
- {DONE} create 'get Reviews by id' api route
- {DONE} fix imgUrl parameter in Review model
- {DONE} fetch Product reviews and show it in Product page 
- {DONE} don't show loading in Product page just show the available data and then fetch the rest data
        make product page faster to load
- {DONE} add show more functionality for TOP RATED FLAVORS in Product page
- {DONE} fix scrap product that doesn't have nutrition
- {DONE} scrap TOP RATED PRODUCTS and TRENDING PRODUCTS products detail data and fetch them in the frontend
- {DONE} scrap more Reviews for a product
- {DONE} add 'view 10 more reviews' functionality in Product page
- {DONE} fix view product button in store page
- {DONE} fix FrontHero background-image if a user didn't load the website in home page
- {DONE} fix menu-sys-overlay still open when clicking on navbar item and navigating to another page    
- {DONE} let the user view top of Product page every time he/she navigated to it
- {DONE} create SmallProduct component
- {DONE} create useUpdateCustomNavInfo hook
- {DONE} create SortingFiltering component and useStartFilter hook
- {DONE} set up Review page       
- {DONE} don't show more btn in ReviewsOverall component if there are no more flavors 
- {DONE} make Reviews component more dynamic 
- {DONE} add click even listener to "Sort and filter" button
- {DONE} add click even listener to "View Product" button and Product image in Review page
- {DONE} fix Review page responsive problems
- {DONE} create LoginModal component
- {DONE} create 'sign up' api route
- {DONE} use 'sign up' api route in the frontend
- {DONE} create 'auto login' functionality in the frontend
- {DONE} update CustomerAccount component if a user logged in
- {DONE} create 'login' api route
- {DONE} use 'login' api route and create 'logout' functionality in the frontend
- {DONE} show error message when login and sign up if there is one.
- {DONE} push a user to home page after login or sign up
- {DONE} show loading in 'login' and 'sign up' btn when the actions are loading and fix pushing to home page before log in or sign up successfully
- {DONE} if a use logged in using LoginModal so don't push to home page just close the modal
- {DONE} create Notification component
- {DONE} show logged in successfully and sign up successfully message using Notification component 
- {DONE} set up LogoutSuccess page
- {DONE} create AccountNav component
- {DONE} scrap AccountNav component data
- {DONE} make AccountNav component more dynamic
- {DONE} create SimpleAccountInfo component
- {DONE} create AddressBox component
- {DONE} set up Account page
- {DONE} push a user to account page after login or sign up
- {DONE} don't push a user to Account page when a user in Store page in he/she clicked account navbar item
- {DONE} fix responsive problems for Account page
- {DONE} create DashboardHome component
- {DONE} make Account page more dynamic
- {DONE} create OrderHistory component
- {DONE} create MyPoints  component
- {DONE} create MyReferrals  component
- {DONE} create SavedCards component
- {DONE} create AddEditAddress component
- {DONE} create UpdateProfile component
- {DONE} create UpdateProfile component part 2
- {DONE} create EmailSubscriptions component
- {DONE} add 'when i user click on 'Write Review' in Product page' open Review page in new tag functionality
- {DONE} create FormRating component
- {DONE} create FlavorForm component and updating Selector component
- {DONE} create WriteReview component 
- {DONE} add isDisabled parameter to Button component
- {DONE} add 'reviewingAs' parameter to User modal
- {DONE} create updateMe endpoint for user resource
- {DONE} fix frontend imports problems
- {DONE} let the user update 'reviewingAs' from WriteReview component 
- {DONE} fix undefine for product name in Product component 
- {DONE} fix some products in store page doesn't have deal
- {DONE} hide deal section for products without deals
- {DONE} fix not able to refreshing Product page 
- {DONE} create PageTitle component 
- {DONE} create MobileTabs component 
- {DONE} create LayeredNavigation component 
- {DONE} add isLightBlue parameter to Button component
- {DONE} scrap LayeredNavigation component's data
- {DONE} make LayeredNavigation component more dynamic
- {DONE} make LayeredNavigation component more dynamic part 2
- {DONE} fix css problems in MobileTabs component
- {DONE} create SearchInfoBar component
- {DONE} create AjaxErrors component
- {DONE} create ProductsWrapper component
- {DONE} update Product component by adding Rating and details for price 
- {DONE} set up Search page
- {DONE} add isVerifiedBuyers parameter in Reviews model and scrap it 
- {DONE} add sourceUrl parameter in Product model and scrap it 
- {DONE} make type parameter In Product modal as Array of String
- {DONE} create updateProduct api route 
- {DONE} update updateProduct api route 
- {DONE} make scrap product script doesn't scrap the same Product twice
        note: use sourceUrl as primary key
- {DONE} re-scrap store products
- {DONE} add category and subCategory parameters to Product model
- {DONE} add isInStock parameter to Product model and update category and  subCategory type
- {DONE} create script to scrap products by category
- {DONE} scrap isInStock, update isInStock parameter in Product model 
- {DONE} update 'updateProduct' api route
- {DONE} fix responsive problems for Footer and EmailSignUp components
- {DONE} scrap products by category and subCategory
- {DONE} set up Search page part 2
- {DONE} make sure not to add the same type for product in IsScrapped function
- {DONE} update PageTitle component
- {DONE} fix couldn't scrap videoId if the video not from youtube 
- {DONE} create Categories component
- {DONE} scrap Categories component  data
- {DONE} make Categories component more dynamic
- {DONE} create AlphablockCategories component
- {DONE} set Categories page
- {DONE} create subCategories component
- {DONE} set Category page
- {DONE} make Product more responsive
- {DONE} make Product more responsive part 2
- {DONE} add hasAddCardBtn parameter to Product and ProductsWrapper
- {DONE} add toggle functionality to LayeredNavigation component
- {DONE} make Category more responsive
- {DONE} make Product more responsive part 3
- {DONE} fix scraping error in scrapProductInfo
- {DONE} fetch products by category in Category page
- {DONE} make Product more responsive part 4
- {DONE} set up subCategory page
- {DONE} fix SubSubmenu navigation error
- {DONE} make Category page and Categories component more dynamic
- {DONE} fix fetching products error after adding search functionality
- {DONE} ALLOW updating buyingOptions in updateProduct api route
- {DONE} fix some products doesn't have price
        note: when you scrap products make sure your vpn location is the USA
- {DONE} create search functionality
        - {DONE} add search functionality to getProducts endpoint
        - {DONE} in the frontend
- {DONE} create countProducts API endpoint
- {DONE} fetch total number of found documents for search
- {DONE} fetch total number of found documents for category
- {DONE} add view next products functionality in ProductsWrapper component
- {DONE} show loading and disable view next button when getting more products
- {DONE} CREATE BrandHeader component
- {DONE} create BrandModal component
- {DONE} fix BrandModal component responsive problems
- {DONE} fix BrandModal component responsive problems part 2
- {DONE} set up Brand page
- {DONE} fetch products by Brand in the frontend
- start in 30 minutes ⌛, ⌛
- {DONE} create CartHeader component
- {DONE} create Cart component
- finish in 30 minutes ❌, ❌
- {DONE} add isDynxs parameter to Button component
- {DONE} create more react icons
- {DONE} fix Cart component responsive problems
- {DONE} fix Cart component responsive problems part 2
- start in 45 minutes ⌛, ⌛, 30 ⌛
- {DONE} create CartTools component
- {DONE} set up ShoppingCart page
- finish in 45 minutes ❌, ❌, ✅
- start in 45 minutes ⌛, 30 ⌛, 30 ⌛, 30 ⌛
- {DONE} add cart parameter to User model
- {DONE} let updateMe endpoint update cart parameter
- {DONE} create 'add to cart' functionality in the backend
- {DONE} fix useSelect errors
- {DONE} create 'add to cart' functionality in the backend part 2
- {DONE} create 'add to cart' functionality in the frontend
- finish in 45 minutes ❌, ❌, ❌, ❌
- start in 30 minutes ⌛
- {DONE} make Cart component more dynamic
- {DONE} create 'delete item from cart' functionality
- finish in 30 minutes ❌
- start in 60 minutes ⌛, ⌛, ⌛, 30 ⌛ 
- {DONE} create 'allow a the frontend update qty of cart element in the database' functionality
- {DONE} create 'update qty' functionality in Cart component
- {DONE} make sure that a cart doesn't have duplicate items
- {DONE} create 'if a user add a duplicate item again in cart increase qty' functionality 
- {DONE} fetch cart parameter too when login and signUp
- {DONE} create 'if a user select flavor set qty to 1' functionality
- {DONE} click afterSelectingOption after clicking enter key
- finish in 60 minutes ❌, ❌, ❌, ✅
- {DONE} add products without flavors to the cart
- {DONE} PUSH a user to cart page after update user's cart successfully
- start in 60 minutes ⌛, ⌛ 
- {DONE} add deals to cart items
- {DONE} add before-deal-price to cart items
- {DONE} create 'buy 1 get 1 free' functionality for Cart component
- {DONE} calculate order total
- {DONE} activate 'continue Shopping' btn
- {DONE} show cart items number
- finish in 60 minutes ❌, ✅
- start in 20 minutes ⌛
- {DONE} make sure to move a user to cart page when a user is in Product page only when adding product to a cart
- {DONE} show actual rating and beforeDealPrice in Product component 
- finish in 20 minutes ✅
- start in 20 minutes ⌛
- {DONE} show cart items number BY QTY 
- {DONE} calculate order total by qty
- finish in 20 minutes ✅
- start in 30 minutes ⌛
- {DONE} improve 'buy 1 get 1 free' functionality in Cart component
- finish in 30 minutes ✅
- start in 90 minutes ⌛, ⌛, ⌛ 
- {DONE} create CheckoutHeader component
- {DONE} make CartHeader component more dynamic
- {DONE} create CheckoutProgress component
- {DONE} create CheckoutSteps component
- {DONE} set up 'Checkout' page
- finish in 90 minutes ❌, ❌, ❌
- {DONE} make CheckoutSteps component more dynamic
- {DONE} make CheckoutSteps component more dynamic part 2
- {DONE} let a user input his/her address
- {DONE} create 'ship to same a address as billing address'
- {DONE} let a user select shipping method and payment method and fix auto login problems
- {DONE} change order review btn based on payment method
- {DONE} make CheckoutProgress component more dynamic
- {DONE} store 'store products' in localStorage
- {DONE} create DealAlertMobile component
- {DONE} create DealAlerts component
- {DONE} let a user close DealAlerts component
- {DONE} set up ProductsDeals page 
- {DONE} fetch products with deals in ProductsDeals page
- {DONE} set up Brands page
- {DONE} create ProductFinderAside component
- {DONE} create TopSellersAside component
- {DONE} create BulkAdAside component
- {DONE} create FeatureHeader component
- {DONE} create TopProducts component
- {DONE} set up Top50Products page

- {DONE} scrap top products 
- {DONE} make TopProducts component more dynamic
- {DONE} test Top50Products page for responsive 

- {DONE} make FrontHero component more dynamic
- {DONE} add '.small-4' and '.text-center' to GridX styled component
- {DONE} create CategoryStats component
- {DONE} create TaxonomyHeading component
        note: put subheading in TaxonomyHeading component

- {DONE} add 'grid-margin-y'  ,'bp600-up-3' ,'medium-up-2'and 'small-up-2' to GridX styled component
- {DONE} fix responsive problems for CategoryStats component
- {DONE} fix responsive problems for GridX component
- {DONE} create MainPageCategory component
- {DONE} scrap MainPageCategory component data
- {DONE} make  MainPageCategory component more dynamic
- {DONE} use TaxonomyHeading component in Articles component
- {DONE} scrap workout articles
- {DONE} make Article component more dynamic
- {DONE} create MainPageQuestions component
- {DONE} set Workout page
- {DONE} create TaxonomyFeatured component
- {DONE} create ViewSortSwitcher component
- {DONE} create Pager component
- {DONE} create TaxonomyBody component
- {DONE} set WorkoutCategory page
- {DONE} fix TaxonomyBody style problem
- {DONE} create Article model in the backend
        Article{
                href: String,
                imgUrl: String,
                imgAlt: String,
                title: String,
                shortSummary: String,
                reads: Number,
                comments: Number,
                type: String,
                isWorkout: Boolean,
                level: String,
                forGender: String,
                time: String
        }
- {DONE} create Article post and get routes
- {DONE} create ArticleHeader component 
- {DONE} fix ArticleHeader component style 
- {DONE} create ArticleSummary component 
- {DONE} create ArticleBody component 
- {DONE} create ArticleFooter component 
- {DONE} create ArticleFooter component part 2
- {DONE} create ArticleComments component 
- {DONE} set up Article page
- {DONE} create script to scrap Article
- {DONE} create 'don't have duplicate article in the database' functionality
- {DONE} update Article model in the backend
- {DONE} create script to scrap Articles by category

- {DONE} scrap subheading parameter for WorkoutCategory
- {DONE} create 'fetch articles' functionality in the frontend
- {DONE} make WorkoutCategory component more dynamic
- {DONE} don't fetch article body for multiple articles
- {DONE} create 'fetch article by id' route
- {DONE} create 'fetch article by id' functionality in the frontend
- {DONE} make Article page more dynamic
- {DONE} fix imgUrl parameter
- {DONE} fix replaceAll undefine
- {DONE} add '$all array functionality' for APIFeatures
- {DONE} remove console.log

- {DONE} create  Article type for FrontHero component
- {DONE} make CategoryStats component more dynamic
- {DONE} make MainPageCategory component more dynamic
- {DONE} create script to scrap Articles in Article page
- {DONE} create put route for Articles resource
- {DONE} add 'type' parameter to Article modal
- {DONE} set up Articles page
- {DONE} make WorkoutCategory page more dynamic to fit Article Category too
not important:

- {TODO} make recommender for you in article page more dynamic
- {TODO} scrap writeBy , writeByImg, writeByDesc and publishedDate
- {TODO} create comment modal and it's post ,get and put routes
- {TODO} scrap article's comments

- {TODO} scrap other Categories
- {TODO} scrap proteinDeals 
- {TODO} make sure updating exist element for array for "cart.array.qty"
- {TODO} create cart modal and routs
- {TODO} don't populate carts when login and signUp, create endpoint to populate it


- {TODO} ADD header-share-wrap to ArticleHeader component 
- {TODO} scrap MainPageQuestions component data
- {TODO} make  MainPageQuestions component more dynamic
- {TODO} add brand in TopProducts component
- {TODO} improve AddressForm by Create Filed components  
- {TODO} fix Selector up down keys when there are long list
- {TODO} create LaberWithSvg component and make it dynamic
- {TODO} make Submenu and SubSubmenu components as one component
- {TODO} fix SitewideBanner typo
- {TODO} fix InPageNav component style when the device mobile S
        note: use QuickNavBar component instead
- {TODO} add voice assistant 
        note - create it folder call voiceAssistant and add all the  voice assistant logic in it
- {TODO} fix the btn extend when the loading icon appear
- {TODO} create puppeteer script to demonstrate the website login buy products and so on.
- {TODO} fix your repo show html instead of javascript
- {TODO} add , for reviews in Product page if it is bigger than 1000
- {TODO} make Nutrition component more readable