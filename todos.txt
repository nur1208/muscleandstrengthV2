- {DONE} set up github
- {DONE} setting up the frontend using create-react-app
- {DONE} deploy the frontend in vercel
- {DONE} set up Home page component
- {DONE} create SitewideBanner component
- {DONE} create Header component
    - {DONE} create HamburgerMenu sub-component
    - {DONE} make HamburgerMenu as component not as sub-component 
    - {DONE} create Flag component
    - {DONE} create WebsiteLogo component
    - {DONE} create Card component
    - {DONE} create CustomerAccount component
    - {DONE} create SearchBar component
    - {DONE} create Navbar, Submenu and SubSubmenu component utils and create scraping script for navbar data
        - {DONE} fix show by brand data in the navbar
        - {DONE} set up redux
        - {DONE} make HamburgerMenu open the side navbar and create menu-mask effect
        - {DONE} create MenuMask component and when click on it close the side navbar 
        - {DONE} create getIconById function  and use it in the navbar
            - {DONE} scrap icon ids
        - {DONE} fix navigating to page instead of open submenu 
    - {DONE} create CustomerSupport component and done creating  Header component
- {DONE} create FrontHero component
- {DONE} create InPageNav component and scraping InPageNav data
- {DONE} make SitewideBanner component dynamic and change it's name to Banner
- {DONE} create Articles and Article components and scrap ArticlesData
        - {DONE} fix scraping reads number with K and M      
        - {DONE} scrap article type
- {DONE} create EmailSignUp component   
- {DONE} create Footer component   
- {DONE} scrap Footer data and make footer component dynamic and create FooterItem component  
- {DONE} set up Store page component
- {DONE} create NavbarInfo component
- {DONE} scrap storeTopBanner data 
- {DONE} create Slider component
        note: reference to your github: https://github.com/nur1208/muscleandstrength-clone-v1/blob/main/frontend/src/components/SliderV2.jsx
- {DONE} create QuickNavBar component
- {DONE} scrap QuickNavBar data and make QuickNavBar component dynamic
- {DONE} create StoreSectionSwiper component
- {DONE} create Product component
- {DONE} create Products component
- {DONE} scrap topDealProducts data and make Products, Product and StoreSectionSwiper components dynamic
- {DONE} improve StoreSectionSwiper component
- {DONE} improve StoreSectionSwiper component again
- {DONE} scrap topRatedProducts data
- {DONE} scrap tradingProducts data
- {DONE} scrap MERCH_BANNER_2 data
- {DONE} create Brands component
- {DONE} add pageHtml.html file to .gitignore
- {DONE} scrap Brands data
- {DONE} scrap MERCH_BANNER_3 data
- {DONE} create MoreOn component
- {DONE} scrap MoreOn data and make MoreOn component dynamic
- {DONE} create PerksFooter component
- {DONE} scrap PerksFooter data, make PerksFooter component dynamic and finish create Store page
- {DONE} test if removing MoreOn component fix Store page responsive problem
- {DONE}  fix Store page responsive problem
- {DONE} fix navbar component problem
- {DONE} improve EmailSignUp component's isSticky state
- {DONE} create Login page component
- {DONE} create Field component and scrap login fields
- {DONE} add required sign to field component
- {DONE} make field component render input element or select element
- {DONE} scrap sign up fields 
- {DONE} create RightSignUpInfo component       
- {DONE} scrap SignUpBenefits data
- {DONE} make Form component more dynamic
- {DONE} create SignUp page component
- {DONE} create GetNotified component
- {DONE} set up Product page component
- {DONE} create ProductHeader component
- {DONE}  fix Product page responsive problem for tablets screen
- {DONE}  fix Product page responsive problem for tablets screen part 2
- {DONE} scrap ProductHeader data
- {DONE} make ProductHeader component more dynamic
- {DONE} create FeaturesList component
- {DONE} scrap FeaturesList data
- {DONE} make FeaturesList component more dynamic
- {DONE} create FeatherLight Modal component
- {DONE} scrap btnTitle for FeaturesList data
- {DONE} fix FeaturesList component responsive problem
- {DONE} create Deals component
- {DONE} scrap Deals component data
- {DONE} make Deals component more dynamic
- {DONE} create Select component and useSelect hook
- {DONE} create BuyingOptions component
- {DONE} close the options after a user selected a option
- {DONE} make 'Reward Points Earned' button open FEATHER_LIGHT modal
- {DONE} create SecureTransaction modal
- {DONE} scrap BuyingOptions data
- {DONE} make BuyingOptions component more dynamic
- {DONE} create BuyingOption component and make it dynamic and fix scrap productData scripts
- {DONE} create Nutrition component
- {DONE} scrap Nutrition data 
- {DONE} scrap Nutrition data part 2
- {DONE} make Nutrition component more dynamic and scrap servingSize and servingsPerContainer params and update Selector and useSelect
- {DONE} test Nutrition component and scraping script
        - {DONE} fix getSelectedValue not function error 
- {DONE} create ProductInfo component
- {DONE} scrap productInfo data
- {DONE} make ProductInfo component more dynamic
- {DONE} create YoutubeVideo component
- {DONE} scrap productInfo data part 2
- {DONE} make ProductInfo component more dynamic part 2
- {DONE} create show-all functionality for Nutrition component when it is small screen
- {DONE} create ReviewsOverall component
- {DONE} scrap ReviewsOverall data 
- {DONE} make ReviewsOverall component more dynamic
- {DONE} create Reviews component
- {DONE} create Review component
- {DONE} scrap Reviews data 
- {DONE} fix responsive problems for Reviews and Review components
- {DONE} make Reviews and Review components more dynamic
        - {DONE} fix reviews parameter in product data
        - {DONE} fix reviews[num].content parameter in product data
        - {DONE} add more then one badge 
- {DONE} scrap ratingItems fro product data and use it in Review component
- {DONE} finish setting up product page
- {DONE} set up the backend
- {DONE} deploy the backend in vercel
- {DONE} create database design for product resource
- {DONE} create Product database model and Product post api route
- {DONE} set up global Error Handler for the backend
- {DONE} add productDetail parameter to Product model 
- {DONE} create getProduct and getProducts routes for Product resource
- {DONE} fix Cast to ObjectId failed error message  for production
        GET clear message for pro
- {DONE} add product Data to mongodb after scraping
- {DONE} create Review database model and createReview api route
- {DONE} createReviews api route
- {DONE} add review Data to mongodb after scraping
- {DONE} scrap all THIS WEEK'S TOP DEALS products detail data and save them in database
- {DONE} update Product model parameters
- {DONE} update product scraping script and re-scrap all TOP DEALS products detail
- {DONE} use top deals products that in database in the frontend
- {DONE} make Product page more dynamic
- {DONE} add productInfo.text, productInfo.videId, productInfo.mainStyle and productInfo.style to Product model and re-scrap
- {DONE} improve scrapProductInfo scraping script and ProductInfo component
- {DONE} create 'get Reviews by id' api route
- {DONE} fix imgUrl parameter in Review model
- {DONE} fetch Product reviews and show it in Product page 
- {DONE} don't show loading in Product page just show the available data and then fetch the rest data
        make product page faster to load
- {DONE} add show more functionality for TOP RATED FLAVORS in Product page
- {DONE} fix scrap product that doesn't have nutrition
- {DONE} scrap TOP RATED PRODUCTS and TRENDING PRODUCTS products detail data and fetch them in the frontend
- {DONE} scrap more Reviews for a product
- {DONE} add 'view 10 more reviews' functionality in Product page
- {DONE} fix view product button in store page
- {DONE} fix FrontHero background-image if a user didn't load the website in home page
- {DONE} fix menu-sys-overlay still open when clicking on navbar item and navigating to another page    
- {DONE} let the user view top of Product page every time he/she navigated to it
- {DONE} create SmallProduct component
- {DONE} create useUpdateCustomNavInfo hook
- {DONE} create SortingFiltering component and useStartFilter hook
- {DONE} set up Review page       
- {DONE} don't show more btn in ReviewsOverall component if there are no more flavors 
- {DONE} make Reviews component more dynamic 
- {DONE} add click even listener to "Sort and filter" button
- {DONE} add click even listener to "View Product" button and Product image in Review page
- {DONE} fix Review page responsive problems
- {DONE} create LoginModal component
- {DONE} create 'sign up' api route
- {DONE} use 'sign up' api route in the frontend
- {DONE} create 'auto login' functionality in the frontend
- {TODO} add isVerifiedBuyers parameter in Reviews model and re-scrap the products
not important:
- {TODO} don't have duplicate products in database
        note: use scrapedDataUrl as primary key
- {TODO} fix Selector up down keys when there are long list
- {TODO} create LaberWithSvg component and make it dynamic
- {TODO} make Submenu and SubSubmenu components as one component
- {TODO} fix SitewideBanner typo
- {TODO} fix InPageNav component style when the device mobile S
        note: use QuickNavBar component instead
- {TODO} add voice assistant 
        note - create it folder call voiceAssistant and add all the  voice assistant logic in it
- {TODO} fix the btn extend when the loading icon appear
- {TODO} create puppeteer script to demonstrate the website login buy products and so on.
- {TODO} fix your repo show html instead of javascript
- {TODO} add , for reviews in Product page if it is bigger than 1000
- {TODO} make Nutrition component more readable